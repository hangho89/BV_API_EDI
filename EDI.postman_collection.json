{
	"info": {
		"_postman_id": "ef523478-d25e-4e6d-a908-2dafab649d5b",
		"name": "EDI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5028081",
		"_collection_link": "https://gold-water-3014.postman.co/workspace/My-Workspace~94bdcccb-b1e9-44a7-84db-0990b4b1f82f/collection/5028081-ef523478-d25e-4e6d-a908-2dafab649d5b?action=share&source=collection_link&creator=5028081"
	},
	"item": [
		{
			"name": "SubmitEDI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=pm.response.json();\r",
							"console.log (\"data\", data)\r",
							"if(data)\r",
							"{\r",
							"    pm.environment.set(\"MessageID_EDI\", data.messageId);\r",
							"}\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status is Processeeed\", function () {\r",
							"    pm.expect(data.status).to.equal(\"RECEIVED\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('messageId', 'status', 'message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The status field must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The messageId should be in a valid UUID format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.messageId).to.exist;\r",
							"    pm.expect(responseData.messageId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, \"messageId is not in valid UUID format\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeid(length) {\r",
							"  var result           = '';\r",
							"  var characters       = '0123456789';\r",
							"  var charactersLength = characters.length;\r",
							"  for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"  }\r",
							"  return result;\r",
							"}\r",
							"const getDate=()=>{\r",
							"  var today = new Date();\r",
							"  var date = String(today.getDate()).padStart(2, '0').padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + today.getFullYear();\r",
							"  return date\r",
							"}\r",
							"var day =getDate()\r",
							"var myJSON = {\"RegistrationNumberOfTransporter\":makeid(7), \"VesselName\":\"H\"+makeid(7), \"VoyageNumber\":\"MMBL\"+makeid(4),\"MasterBill\":\"MBL2025_\"+makeid(7),\"HBill\":\"Bill\"+makeid(7)};\r",
							"pm.environment.set(\"VoyageNumber_IATA\", myJSON.VoyageNumber);\r",
							"pm.environment.set(\"MasterBill_IATA\", myJSON.MasterBill);\r",
							"pm.environment.set(\"HBill_IATA\", myJSON.HBill);\r",
							"\r",
							"\r",
							"const evn = pm.variables.get(\"evn\");\r",
							"pm.sendRequest({\r",
							"      url: `${evn}/apps/keycloak/realms/TTEK_STAGING/protocol/openid-connect/token`,\r",
							"      method: 'POST',\r",
							"       header: {\r",
							"    'Content-Type': 'application/x-www-form-urlencoded',\r",
							"  },\r",
							"      body: {\r",
							"          mode: 'urlencoded',\r",
							"          urlencoded: [\r",
							"            {key: \"grant_type\", value: \"password\"},\r",
							"            {key: \"client_id\", value: \"BV_SWAGGER_UI\"},\r",
							"            {key: \"username\", value: \"da.hua.officer@yopmail.com\"},\r",
							"            {key: \"password\", value: \"@Ttek1234\"},\r",
							"        ]\r",
							"      }\r",
							"  }, \r",
							"  function (err, response) {\r",
							"    console.log(\"token\",response.json().access_token);\r",
							"        pm.environment.set(\"tokencarrier\", response.json().access_token);\r",
							"  });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r\nUNH+158028+CUSCAR:D:16A:UN:RCG001'\r\nBGM+85:::ALM+BKC201216110346+9'\r\nDTM+132:20250518:102'\r\nDTM+136:20250518:102'\r\nDTM+137:20250516:102'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHABO'\r\nLOC+87+GHABK'\r\nRFF+ACL:{{VoyageNumber_IATA}}'\r\nNAD+RL+OCEN'\r\nNAD+MS+OCEN'\r\nNAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r\nNAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r\nNAD+DEG+OCEN++COSCO CONTAINER LINES'\r\nTDT+20+{{VoyageNumber_IATA}}+1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'\r\nDTM+132:202505171300:203'\r\nDTM+369:202505181200:203'\r\nEQD+CN+NYKU8472717+:102:1++3+1'\r\nMEA+AAE+AAM+KGM:19260'\r\nMEA+AAE+VGM+KGM:23060'\r\nSEL+CNX0000001+CA+++1'\r\nCNT+16:1'\r\nCNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r\nCNT+16:2'\r\nRFF+BM:{{MasterBill_IATA}}'\r\nCNT+7:4000'\r\nCNT+11:2000'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHABO'\r\nTDT+20'\r\nNAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r\nNAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r\nQTY+118:4000:E4'\r\nQTY+128:2000:E4'\r\nGID+1+2000:PK'\r\nFTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r\nMEA+AAE+AAA+MTQ:3900'\r\nMEA+AAE+GW+KGM:4000'\r\nMEA+AAE+T+KGM:100'\r\nSGP+NYKU8472717+616'\r\nPCI+24+NO MARKS AND NUMBERS'\r\nCST++392690'\r\nRFF+BH:{{HBill_IATA}}'\r\nCNT+7:4000'\r\nCNT+11:2000'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHABO'\r\nTDT+20'\r\nNAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r\nQTY+118:4000:E4'\r\nQTY+128:2000:E4'\r\nGID+1+2000:PK'\r\nFTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r\nMEA+AAE+AAA+MTQ:3900'\r\nMEA+AAE+GW+KGM:4000'\r\nMEA+AAE+T+KGM:100'\r\nSGP+NYKU8472717+616'\r\nPCI+24+NO MARKS AND NUMBERS'\r\nCST++392690'\r\nUNT+57+158028'\r\nUNZ+1+157885'",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{evn}}/api/gateway/v1/ediman/ext/edifact/cuscar",
					"host": [
						"{{evn}}"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"cuscar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// Get response text and parse to JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Status is PROCESSED\r",
							"pm.test(\"Status is PROCESSED\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"PROCESSED\");\r",
							"}); \r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'type', 'companyTaxId', 'status', 'errorList');\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 200ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"Validate that errorList is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Company Tax ID must be a non-empty string if present\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    if (responseData.companyTaxId) {\r",
							"        pm.expect(responseData.companyTaxId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const delay = ms => new Promise(res => setTimeout(res, ms));\r",
							"\r",
							"(async () => {\r",
							"  await delay(3000); \r",
							"})();\r",
							"\r",
							"const evn = pm.variables.get(\"evn\");\r",
							"pm.sendRequest({\r",
							"      url: `${evn}/apps/keycloak/realms/TTEK_STAGING/protocol/openid-connect/token`,\r",
							"      method: 'POST',\r",
							"       header: {\r",
							"    'Content-Type': 'application/x-www-form-urlencoded',\r",
							"  },\r",
							"      body: {\r",
							"          mode: 'urlencoded',\r",
							"          urlencoded: [\r",
							"            {key: \"grant_type\", value: \"password\"},\r",
							"            {key: \"client_id\", value: \"BV_SWAGGER_UI\"},\r",
							"            {key: \"username\", value: \"da.hua.officer@yopmail.com\"},\r",
							"            {key: \"password\", value: \"@Ttek1234\"},\r",
							"        ]\r",
							"      }\r",
							"  }, \r",
							"  function (err, response) {\r",
							"    console.log(\"token\",response.json().access_token);\r",
							"        pm.environment.set(\"tokencarrier\", response.json().access_token);\r",
							"  });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{evn}}/api/gateway/v1/ediman/ext/edifact/messages/{{MessageID_EDI}}",
					"host": [
						"{{evn}}"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"messages",
						"{{MessageID_EDI}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "SubmitEDI_Rejected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=pm.response.json();\r",
							"console.log (\"data\", data)\r",
							"if(data)\r",
							"{\r",
							"    pm.environment.set(\"MessageID_EDI\", data.messageId);\r",
							"}\r",
							"pm.test(\"Response status code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status is Processeeed\", function () {\r",
							"    pm.expect(data.status).to.equal(\"REJECTED\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('messageId', 'status', 'message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The status field must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The messageId should be in a valid UUID format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.messageId).to.exist;\r",
							"    pm.expect(responseData.messageId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, \"messageId is not in valid UUID format\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeid(length) {\r",
							"  var result           = '';\r",
							"  var characters       = '0123456789';\r",
							"  var charactersLength = characters.length;\r",
							"  for ( var i = 0; i < length; i++ ) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"  }\r",
							"  return result;\r",
							"}\r",
							"const getDate=()=>{\r",
							"  var today = new Date();\r",
							"  var date = String(today.getDate()).padStart(2, '0').padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + today.getFullYear();\r",
							"  return date\r",
							"}\r",
							"var day =getDate()\r",
							"var myJSON = {\"RegistrationNumberOfTransporter\":makeid(7), \"VesselName\":\"H\"+makeid(7), \"VoyageNumber\":\"MMBL\"+makeid(4),\"MasterBill\":\"MBL2025_\"+makeid(7),\"HBill\":\"Bill\"+makeid(7)};\r",
							"pm.environment.set(\"VoyageNumber_IATA\", myJSON.VoyageNumber);\r",
							"pm.environment.set(\"MasterBill_IATA\", myJSON.MasterBill);\r",
							"pm.environment.set(\"HBill_IATA\", myJSON.HBill);\r",
							"\r",
							"const evn = pm.variables.get(\"evn\");\r",
							"pm.sendRequest({\r",
							"      url: `${evn}/apps/keycloak/realms/TTEK_STAGING/protocol/openid-connect/token`,\r",
							"      method: 'POST',\r",
							"       header: {\r",
							"    'Content-Type': 'application/x-www-form-urlencoded',\r",
							"  },\r",
							"      body: {\r",
							"          mode: 'urlencoded',\r",
							"          urlencoded: [\r",
							"            {key: \"grant_type\", value: \"password\"},\r",
							"            {key: \"client_id\", value: \"BV_SWAGGER_UI\"},\r",
							"            {key: \"username\", value: \"da.hua.officer@yopmail.com\"},\r",
							"            {key: \"password\", value: \"@Ttek1234\"},\r",
							"        ]\r",
							"      }\r",
							"  }, \r",
							"  function (err, response) {\r",
							"    console.log(\"token\",response.json().access_token);\r",
							"        pm.environment.set(\"tokencarrier\", response.json().access_token);\r",
							"  });\r",
							"\r",
							"//TDT+20+{{VoyageNumber_IATA}}+1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r\nUNH+158028+CUSCAR:D:16A:UN:RCG001'\r\nBGM+85:::ALM+BKC201216110346+9'\r\nDTM+132:20250518:102'\r\nDTM+136:20250518:102'\r\nDTM+137:20250516:102'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHACC'\r\nLOC+87+MYKAB'\r\nRFF+ACL:{{VoyageNumber_IATA}}'\r\nNAD+RL+OCEN'\r\nNAD+MS+OCEN'\r\nNAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r\nNAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r\nNAD+DEG+OCEN++COSCO CONTAINER LINES'\r\n\r\nDTM+132:202505171300:203'\r\nDTM+369:202505181200:203'\r\nEQD+CN+NYKU8472717+:102:1++3+1'\r\nMEA+AAE+AAM+KGM:19260'\r\nMEA+AAE+VGM+KGM:23060'\r\nSEL+CNX0000001+CA+++1'\r\nCNT+16:1'\r\nCNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r\nCNT+16:2'\r\nRFF+BM:{{MasterBill_IATA}}'\r\nCNT+7:4000'\r\nCNT+11:2000'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHABO'\r\nTDT+20'\r\nNAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r\nNAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r\nQTY+118:4000:E4'\r\nQTY+128:2000:E4'\r\nGID+1+2000:PK'\r\nFTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r\nMEA+AAE+AAA+MTQ:3900'\r\nMEA+AAE+GW+KGM:4000'\r\nMEA+AAE+T+KGM:100'\r\nSGP+NYKU8472717+616'\r\nPCI+24+NO MARKS AND NUMBERS'\r\nCST++392690'\r\nRFF+BH:{{HBill_IATA}}'\r\nCNT+7:4000'\r\nCNT+11:2000'\r\nLOC+5+ZADUR'\r\nLOC+8+ZADUR'\r\nLOC+9+GHABO'\r\nLOC+36+ZADUR'\r\nLOC+60+GHABO'\r\nTDT+20'\r\nNAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r\nNAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r\nQTY+118:4000:E4'\r\nQTY+128:2000:E4'\r\nGID+1+2000:PK'\r\nFTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r\nMEA+AAE+AAA+MTQ:3900'\r\nMEA+AAE+GW+KGM:4000'\r\nMEA+AAE+T+KGM:100'\r\nSGP+NYKU8472717+616'\r\nPCI+24+NO MARKS AND NUMBERS'\r\nCST++392690'\r\nUNT+57+158028'\r\nUNZ+1+157885'",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{evn}}/api/gateway/v1/ediman/ext/edifact/cuscar",
					"host": [
						"{{evn}}"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"cuscar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validations_WaybillReferenceisrequired",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Get response text and parse to JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Status is REJECTED\r",
							"pm.test(\"Status is REJECTED\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"REJECTED\");\r",
							"});\r",
							"\r",
							"// Error list is not empt\r",
							"pm.test(\"Error list is not empty\", function () {\r",
							"    pm.expect(jsonData.errorList).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Detail message matches expected error\r",
							"pm.test(\"Detail message matches expected error {Validation Error: $.reference: Waybill Reference is required}\", function () {\r",
							"    pm.expect(jsonData.errorList[0].detail).to.eql(\r",
							"        \"Cannot process CUSCAR Message. Validation Error: $.reference: Waybill Reference is required\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'type', 'companyTaxId', 'status', 'errorList');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the errorList array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array');\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.be.an('object');\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"        pm.expect(error.code).to.be.a('string');\r",
							"        pm.expect(error.message).to.be.a('string');\r",
							"        pm.expect(error.detail).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each error in the errorList contains the required fields - code, message, and detail\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const tokencarrier = pm.variables.get(\"tokencarrier\");\r",
							"pm.sendRequest({\r",
							"    url: `${evn}/api/gateway/v1/ediman/ext/edifact/cuscar`,  // Replace with actual URL\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"\r",
							"        'Content-Type': 'text/plain',\r",
							"        'authorization': `Bearer ${tokencarrier.trim()}`\r",
							"    },\r",
							"    body: `UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r",
							"UNH+158028+CUSCAR:D:16A:UN:RCG001'\r",
							"BGM+85:::ALM+BKC201216110346+9'\r",
							"DTM+132:20250518:102'\r",
							"DTM+136:20250518:102'\r",
							"DTM+137:20250516:102'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"LOC+87+GHABK'\r",
							"RFF+ACL:'\r",
							"NAD+RL+OCEN'\r",
							"NAD+MS+OCEN'\r",
							"NAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+DEG+OCEN++COSCO CONTAINER LINES'\r",
							"TDT+20+777Z+1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'\r",
							"DTM+132:202505171300:203'\r",
							"DTM+369:202505181200:203'\r",
							"EQD+CN+NYKU8472717+:102:1++3+1'\r",
							"MEA+AAE+AAM+KGM:19260'\r",
							"MEA+AAE+VGM+KGM:23060'\r",
							"SEL+CNX0000001+CA+++1'\r",
							"CNT+16:1'\r",
							"CNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r",
							"CNT+16:2'\r",
							"RFF+BM:TH5555555'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"RFF+BH:'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"UNT+57+158028'\r",
							"UNZ+1+157885'`\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"    } else {\r",
							"        console.log('Response status:', res.status);\r",
							"        console.log('Response body:', res.text());\r",
							"     pm.environment.set(\"MessageID_EDI\", res.json().messageId);\r",
							"    }\r",
							"});\r",
							"\r",
							"const delay = ms => new Promise(res => setTimeout(res, ms));\r",
							"\r",
							"(async () => {\r",
							"  await delay(3000); \r",
							"})();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{evn}}/api/gateway/v1/ediman/ext/edifact/messages/{{MessageID_EDI}}",
					"host": [
						"{{evn}}"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"messages",
						"{{MessageID_EDI}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validations_PlaceOfLoadingisrequired",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Get response text and parse to JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Status is REJECTED\r",
							"pm.test(\"Status is REJECTED\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"REJECTED\");\r",
							"});\r",
							"\r",
							"// Error list is not empt\r",
							"pm.test(\"Error list is not empty\", function () {\r",
							"    pm.expect(jsonData.errorList).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Detail message matches expected error\r",
							"pm.test(\"Detail message matches expected error {Validation Error: $.reference: Waybill Reference is required}\", function () {\r",
							"    pm.expect(jsonData.errorList[0].detail).to.eql(\r",
							"        \"Cannot publish master bills. Validation Error: $.loadingPlaceCode: Place Of Loading is required\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'type', 'companyTaxId', 'status', 'errorList');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the errorList array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array');\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.be.an('object');\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"        pm.expect(error.code).to.be.a('string');\r",
							"        pm.expect(error.message).to.be.a('string');\r",
							"        pm.expect(error.detail).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each error in the errorList contains the required fields - code, message, and detail\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const tokencarrier = pm.variables.get(\"tokencarrier\");\r",
							"pm.sendRequest({\r",
							"    url: `${evn}/api/gateway/v1/ediman/ext/edifact/cuscar`,  // Replace with actual URL\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"\r",
							"        'Content-Type': 'text/plain',\r",
							"        'authorization': `Bearer ${tokencarrier.trim()}`\r",
							"    },\r",
							"    body: `UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r",
							"UNH+158028+CUSCAR:D:16A:UN:RCG001'\r",
							"BGM+85:::ALM+BKC201216110346+9'\r",
							"DTM+132:20250518:102'\r",
							"DTM+136:20250518:102'\r",
							"DTM+137:20250516:102'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"LOC+87+GHABK'\r",
							"RFF+ACL:'\r",
							"NAD+RL+OCEN'\r",
							"NAD+MS+OCEN'\r",
							"NAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+DEG+OCEN++COSCO CONTAINER LINES'\r",
							"TDT+20++1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'\r",
							"DTM+132:202505171300:203'\r",
							"DTM+369:202505181200:203'\r",
							"EQD+CN+NYKU8472717+:102:1++3+1'\r",
							"MEA+AAE+AAM+KGM:19260'\r",
							"MEA+AAE+VGM+KGM:23060'\r",
							"SEL+CNX0000001+CA+++1'\r",
							"CNT+16:1'\r",
							"CNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r",
							"CNT+16:2'\r",
							"RFF+BM:5522221'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"RFF+BH:HBL511103'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"UNT+57+158028'\r",
							"UNZ+1+157885'`\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"    } else {\r",
							"        console.log('Response status:', res.status);\r",
							"        console.log('Response body:', res.text());\r",
							"     pm.environment.set(\"MessageID_EDI\", res.json().messageId);\r",
							"    }\r",
							"});\r",
							"\r",
							"const delay = ms => new Promise(res => setTimeout(res, ms));\r",
							"\r",
							"(async () => {\r",
							"  await delay(3000); \r",
							"})();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bv-core-dev.ttekglobal.com/api/gateway/v1/ediman/ext/edifact/messages/{{MessageID_EDI}}",
					"protocol": "https",
					"host": [
						"bv-core-dev",
						"ttekglobal",
						"com"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"messages",
						"{{MessageID_EDI}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validations_checkGrossweight",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Get response text and parse to JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Status is REJECTED\r",
							"pm.test(\"Status is REJECTED\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"REJECTED\");\r",
							"});\r",
							"\r",
							"// Error list is not empt\r",
							"pm.test(\"Error list is not empty\", function () {\r",
							"    pm.expect(jsonData.errorList).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Detail message matches expected error\r",
							"pm.test(\"Detail message matches expected error {Validation Error: Manifested Packages must be greater than 0}\", function () {\r",
							"    pm.expect(jsonData.errorList[0].detail).to.eql(\r",
							"        \"Cannot publish master bills. Validation Error: $.packagesNumber: Manifested Packages must be greater than 0, Total packages [2,000] in HBLs cannot exceed the declared packages [0] in the MBL; $.containers[0].packagesNumber: Total packages number in containers is not equal to the master bill\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'type', 'companyTaxId', 'status', 'errorList');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the errorList array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array');\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.be.an('object');\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"        pm.expect(error.code).to.be.a('string');\r",
							"        pm.expect(error.message).to.be.a('string');\r",
							"        pm.expect(error.detail).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each error in the errorList contains the required fields - code, message, and detail\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const tokencarrier = pm.variables.get(\"tokencarrier\");\r",
							"pm.sendRequest({\r",
							"    url: `${evn}/api/gateway/v1/ediman/ext/edifact/cuscar`,  // Replace with actual URL\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"\r",
							"        'Content-Type': 'text/plain',\r",
							"        'authorization': `Bearer ${tokencarrier.trim()}`\r",
							"    },\r",
							"    body: `UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r",
							"UNH+158028+CUSCAR:D:16A:UN:RCG001'\r",
							"BGM+85:::ALM+BKC201216110346+9'\r",
							"DTM+132:20250518:102'\r",
							"DTM+136:20250518:102'\r",
							"DTM+137:20250516:102'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"LOC+87+GHABK'\r",
							"RFF+ACL:'\r",
							"NAD+RL+OCEN'\r",
							"NAD+MS+OCEN'\r",
							"NAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+DEG+OCEN++COSCO CONTAINER LINES'\r",
							"TDT+20+999Y+1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'\r",
							"DTM+132:202505171300:203'\r",
							"DTM+369:202505181200:203'\r",
							"EQD+CN+NYKU8472717+:102:1++3+1'\r",
							"MEA+AAE+AAM+KGM:19260'\r",
							"MEA+AAE+VGM+KGM:23060'\r",
							"SEL+CNX0000001+CA+++1'\r",
							"CNT+16:1'\r",
							"CNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r",
							"CNT+16:2'\r",
							"RFF+BM:MBL44455619'\r",
							"CNT+7:0'\r",
							"CNT+11:0'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"RFF+BH:HZ0009'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"UNT+57+158028'\r",
							"UNZ+1+157885'`\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"    } else {\r",
							"        console.log('Response status:', res.status);\r",
							"        console.log('Response body:', res.text());\r",
							"     pm.environment.set(\"MessageID_EDI\", res.json().messageId);\r",
							"    }\r",
							"});\r",
							"\r",
							"const delay = ms => new Promise(res => setTimeout(res, ms));\r",
							"\r",
							"(async () => {\r",
							"  await delay(3000); \r",
							"})();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bv-core-dev.ttekglobal.com/api/gateway/v1/ediman/ext/edifact/messages/{{MessageID_EDI}}",
					"protocol": "https",
					"host": [
						"bv-core-dev",
						"ttekglobal",
						"com"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"messages",
						"{{MessageID_EDI}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validations_checkVoyage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Get response text and parse to JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Status is REJECTED\r",
							"pm.test(\"Status is REJECTED\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"REJECTED\");\r",
							"});\r",
							"\r",
							"// Error list is not empt\r",
							"pm.test(\"Error list is not empty\", function () {\r",
							"    pm.expect(jsonData.errorList).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Detail message matches expected error\r",
							"pm.test(\"Detail message matches expected error {Validation Error: $.generalSegment.voyageNumber: Voyage Number is required}\", function () {\r",
							"    pm.expect(jsonData.errorList[0].detail).to.eql(\r",
							"        \"Cannot process CUSCAR message. Validation Error: $.generalSegment.voyageNumber: Voyage Number is required\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'type', 'companyTaxId', 'status', 'errorList');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the errorList array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array');\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.be.an('object');\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"        pm.expect(error.code).to.be.a('string');\r",
							"        pm.expect(error.message).to.be.a('string');\r",
							"        pm.expect(error.detail).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each error in the errorList contains the required fields - code, message, and detail\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorList).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.errorList.forEach(function(error) {\r",
							"        pm.expect(error).to.have.all.keys('code', 'message', 'detail');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const tokencarrier = pm.variables.get(\"tokencarrier\");\r",
							"pm.sendRequest({\r",
							"    url: `${evn}/api/gateway/v1/ediman/ext/edifact/cuscar`,  // Replace with actual URL\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"\r",
							"        'Content-Type': 'text/plain',\r",
							"        'authorization': `Bearer ${tokencarrier.trim()}`\r",
							"    },\r",
							"    body: `UNB+UNOB:4+OCEN::B5Q4D5Q8X8J4Y2A4:ONEAS2+SARSCAR+20201216:1338+157885++CUSCAR++1+OCEN'\r",
							"UNH+158028+CUSCAR:D:16A:UN:RCG001'\r",
							"BGM+85:::ALM+BKC201216110346+9'\r",
							"DTM+132:20250518:102'\r",
							"DTM+136:20250518:102'\r",
							"DTM+137:20250516:102'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"LOC+87+GHABK'\r",
							"RFF+ACL:'\r",
							"NAD+RL+OCEN'\r",
							"NAD+MS+OCEN'\r",
							"NAD+CA+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+AG+44440001+Da Hua:Saudi Arabia, Riyadh, 70965, SA'\r",
							"NAD+DEG+OCEN++COSCO CONTAINER LINES'\r",
							"TDT+20++1++COS:172:ZZZ:COSCO CONTAINER LINES+++VRMN9:103::COSCO SURABAYA:HK'\r",
							"DTM+132:202505171300:203'\r",
							"DTM+369:202505181200:203'\r",
							"EQD+CN+NYKU8472717+:102:1++3+1'\r",
							"MEA+AAE+AAM+KGM:19260'\r",
							"MEA+AAE+VGM+KGM:23060'\r",
							"SEL+CNX0000001+CA+++1'\r",
							"CNT+16:1'\r",
							"CNI+1+ONEYSH0FSCV88700:1:ONEYSH0FSCV88700::20201218'\r",
							"CNT+16:2'\r",
							"RFF+BM:MBL44455619'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah,10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"RFF+BH:HZ0009'\r",
							"CNT+7:4000'\r",
							"CNT+11:2000'\r",
							"LOC+5+ZADUR'\r",
							"LOC+8+ZADUR'\r",
							"LOC+9+GHABO'\r",
							"LOC+36+ZADUR'\r",
							"LOC+60+GHABO'\r",
							"TDT+20'\r",
							"NAD+CZ+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CN+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+NI+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+FW+90184561+Atlas World Logistics:Jeddah 7777, Jeddah: 10101010, SA'\r",
							"NAD+CA+44440001+Da Hua:2 PRICE LANE, EXT.127, MEADOWVIEW B:2 PRICE LANE, EXT.127, MEADOWVIEW:JOHANNESBURG:2000'\r",
							"QTY+118:4000:E4'\r",
							"QTY+128:2000:E4'\r",
							"GID+1+2000:PK'\r",
							"FTX+AAA++9+PLASTIC MOULDING ALUMINUMN MOULDING'\r",
							"MEA+AAE+AAA+MTQ:3900'\r",
							"MEA+AAE+GW+KGM:4000'\r",
							"MEA+AAE+T+KGM:100'\r",
							"SGP+NYKU8472717+616'\r",
							"PCI+24+NO MARKS AND NUMBERS'\r",
							"CST++392690'\r",
							"UNT+57+158028'\r",
							"UNZ+1+157885'`\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"    } else {\r",
							"        console.log('Response status:', res.status);\r",
							"        console.log('Response body:', res.text());\r",
							"     pm.environment.set(\"MessageID_EDI\", res.json().messageId);\r",
							"    }\r",
							"});\r",
							"\r",
							"const delay = ms => new Promise(res => setTimeout(res, ms));\r",
							"\r",
							"(async () => {\r",
							"  await delay(3000); \r",
							"})();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokencarrier}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bv-core-dev.ttekglobal.com/api/gateway/v1/ediman/ext/edifact/messages/{{MessageID_EDI}}",
					"protocol": "https",
					"host": [
						"bv-core-dev",
						"ttekglobal",
						"com"
					],
					"path": [
						"api",
						"gateway",
						"v1",
						"ediman",
						"ext",
						"edifact",
						"messages",
						"{{MessageID_EDI}}"
					]
				}
			},
			"response": []
		}
	]
}